==323== Memcheck, a memory error detector
==323== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==323== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==323== Command: ./main --leak-check=full
==323== 
==323== Conditional jump or move depends on uninitialised value(s)
==323==    at 0x48D9B56: __vfprintf_internal (vfprintf-internal.c:1516)
==323==    by 0x48C381E: printf (printf.c:33)
==323==    by 0x1091D8: main (main.c:171)
==323== 
==323== Use of uninitialised value of size 8
==323==    at 0x48BD33B: _itoa_word (_itoa.c:177)
==323==    by 0x48D8B3D: __vfprintf_internal (vfprintf-internal.c:1516)
==323==    by 0x48C381E: printf (printf.c:33)
==323==    by 0x1091D8: main (main.c:171)
==323== 
==323== Conditional jump or move depends on uninitialised value(s)
==323==    at 0x48BD34C: _itoa_word (_itoa.c:177)
==323==    by 0x48D8B3D: __vfprintf_internal (vfprintf-internal.c:1516)
==323==    by 0x48C381E: printf (printf.c:33)
==323==    by 0x1091D8: main (main.c:171)
==323== 
==323== Conditional jump or move depends on uninitialised value(s)
==323==    at 0x48D9643: __vfprintf_internal (vfprintf-internal.c:1516)
==323==    by 0x48C381E: printf (printf.c:33)
==323==    by 0x1091D8: main (main.c:171)
==323== 
==323== Conditional jump or move depends on uninitialised value(s)
==323==    at 0x48D8C85: __vfprintf_internal (vfprintf-internal.c:1516)
==323==    by 0x48C381E: printf (printf.c:33)
==323==    by 0x1091D8: main (main.c:171)
==323== 
==323== Invalid read of size 4
==323==    at 0x1091BC: main (main.c:171)
==323==  Address 0x1fff001000 is not stack'd, malloc'd or (recently) free'd
==323== 
==323== 
==323== Process terminating with default action of signal 11 (SIGSEGV)
==323==  Access not within mapped region at address 0x1FFF001000
==323==    at 0x1091BC: main (main.c:171)
==323==  If you believe this happened as a result of a stack
==323==  overflow in your program's main thread (unlikely but
==323==  possible), you can try to increase the size of the
==323==  main thread stack using the --main-stacksize= flag.
==323==  The main thread stack size used in this run was 8388608.
==323== 
==323== HEAP SUMMARY:
==323==     in use at exit: 1,024 bytes in 1 blocks
==323==   total heap usage: 1 allocs, 0 frees, 1,024 bytes allocated
==323== 
==323== LEAK SUMMARY:
==323==    definitely lost: 0 bytes in 0 blocks
==323==    indirectly lost: 0 bytes in 0 blocks
==323==      possibly lost: 0 bytes in 0 blocks
==323==    still reachable: 1,024 bytes in 1 blocks
==323==         suppressed: 0 bytes in 0 blocks
==323== Rerun with --leak-check=full to see details of leaked memory
==323== 
==323== Use --track-origins=yes to see where uninitialised values come from
==323== For lists of detected and suppressed errors, rerun with: -s
==323== ERROR SUMMARY: 70 errors from 6 contexts (suppressed: 0 from 0)
